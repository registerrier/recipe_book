{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recipe to show the interactively edit the Sky model on the notebook  \n",
    "\n",
    "This example shows how to transform a gammapy model to a pandas dataframe, a widely used tabular format, and modify the parameters interactively on the notebook.  \n",
    "Plain text models in the XML or yaml format can not be sorted or filtered. Here we propose to use `qgrid` to explore and edit the Model.  \n",
    "\n",
    "\n",
    "*Qgrid is a Jupyter notebook widget which uses SlickGrid to render pandas DataFrames within a Jupyter notebook. This allows you to explore your DataFrames with intuitive scrolling, sorting, and filtering controls, as well as edit your DataFrames by double clicking cells.* [Github](https://github.com/quantopian/qgrid)  \n",
    "\n",
    "\n",
    "See GIF movie demo [here](https://github.com/quantopian/qgrid/blob/master/docs/images/filtering_demo.gif).\n",
    "\n",
    "Qgrid can be installed via conda:  \n",
    "`conda install -c conda-forge qgrid`  \n",
    "Works using Jupyter notebook.\n",
    "Currently doesn't work using Jupyter Lab 3.0.  \n",
    "\n",
    "There are alternatives to qgrid like [ipysheet](https://github.com/QuantStack/ipysheet) or [ipyaggrid](https://dgothrek.gitlab.io/ipyaggrid)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import Models\n",
    "from astropy.table import Table\n",
    "\n",
    "# read gammapy models\n",
    "models = Models.read(\"$GAMMAPY_DATA/tests/models/gc_example_models.yaml\")\n",
    "df = models.to_parameters_table().to_pandas()\n",
    "\n",
    "import qgrid\n",
    "\n",
    "qgrid_widget = qgrid.show_grid(df, grid_options={\"maxVisibleRows\": 10})\n",
    "qgrid_widget\n",
    "# You can sort, filter, freeze/thaw parameters\n",
    "# e.g show all spectral indices, only parameters of a given source, only the spatial parameters, etc\n",
    "# all changes values are recorded and will need to be loaded in the gammapy model in a separated cell."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the changed parameters and verify that the model has been updated "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qgrid_df = qgrid_widget.get_changed_df()  # get changed values\n",
    "models.update_parameters_from_table(\n",
    "    Table.from_pandas(qgrid_df)\n",
    ")  # update model with changed values\n",
    "models.to_parameters_table()  # print model to verify that values were updated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [],
   "source": [
    "# Display thumbnails for nbsphinx-thumbnail\n",
    "from IPython.display import Image\n",
    "\n",
    "display(Image(filename=\"edit-interactive.png\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
